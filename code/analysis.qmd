---
title: "Report Preparation"
format: html
editor: visual
execute:
  warning: false
---

# Preparation

Load all related packages, and define hyper-parameters from the very beginning. To ensure reproductivity, all seed are set to the fixed value `seed`.

```{r}
library(tidyverse) # data cleaning
library(caret) # confusion matrics
library(bnclassify) # BN
library(kernlab) # SVM
library(randomForest) # random forest
```

```{r}
# set hyperparameters
path_csv <- "../Data/patient.csv"
seed <- 9
```

# Data

## Loading

First of all, load the raw data. There are 95839 samples and 20 features (including the response variable) here.

```{r}
df <- read.csv(path_csv)
dim(df)
head(df)
```

## Cleaning

Aiming to solve the binary classification problem, binary `y` should be elicited first. As for features, not all of them are available. For example, `pneumonia = 99` indicate the feature `pneumonia` is not available for this sample. In this case, we should label `99` as `NA` to avoid future mistakes.

```{r}
df_agefac <- df %>% mutate(y = factor(ifelse(death_date == "9999-99-99", 0, 1),
                                      labels = c("live", "die")),
                    age = factor(age),
              across(c(sex, patient_type, intubated, pneumonia, pregnant, 
                       diabetes, copd, asthma, immunosuppression, hypertension,
                       other_diseases, cardiovascular, obesity, chronic_kidney_failure,
                       smoker, another_case, icu, outcome), ~ factor(ifelse(.>2, NA, .)))) %>%
  select(-c(death_date))
df_ageori <- df %>% mutate(y = factor(ifelse(death_date == "9999-99-99", 0, 1),
                                      labels = c("live", "die")),
              across(c(sex, patient_type, intubated, pneumonia, pregnant, 
                       diabetes, copd, asthma, immunosuppression, hypertension,
                       other_diseases, cardiovascular, obesity, chronic_kidney_failure,
                       smoker, another_case, icu, outcome), ~ factor(ifelse(.>2, NA, .)))) %>%
  select(-c(death_date))
head(df)
```

# Model

In this part, we managed to reproduce the result in the papar [Classification of Covid-19 Dataset with Some Machine Learning Methods](https://dergipark.org.tr/en/pub/jauist/issue/55760/748667). machine learning classifier methods are considered:

-   NaiveBayes

-   BayesNet

-   SMO (SVM)

-   Random Forest

-   Decision Tree (C4.5)

-   KNN

## NaiveBayes

```{r, eval = FALSE}
df <- df_agefac
set.seed(seed)
model_nb <- nb('y', df)
model_nb <- lp(model_nb, df, smooth = 1)
cv(model_nb, df, k = 10)
pred <- predict(model_nb, df)
confusionMatrix(pred, df$y)
```

```{r, echo = FALSE, eval = FALSE}
save.image(file = "midresult_bn.RData")
```

```{r, echo = FALSE}
load(file = "midresult_bn.RData")
confusionMatrix(pred, df$y)
```


## BayesNet

```{r, eval = FALSE}
set.seed(seed)
model_bn <- tan_cl('y', df, score = 'aic')
model_bn <- lp(model_bn, df, smooth = 1)
cv(model_bn, df, k = 10)
pred <- predict(model_bn, df)
confusionMatrix(pred, df$y)
```

```{r, echo = FALSE, eval = FALSE}
save.image(file = "midresult_bn2.RData")
```

```{r, echo = FALSE}
load(file = "midresult_bn2.RData")
confusionMatrix(pred, df$y)
```
## SVM

```{r}
model <- ksvm(y ~ ., data = df, type = "C-svc")

# 查看模型细节
print(model)

# 预测
predictions <- predict(model, df)

# 查看预测结果
table(predictions, na.omit(df)$y)
```



## Random Forest


```{r}
df <- df_ageori
model_rf <- randomForest(y ~ ., data=df, importance=TRUE, na.action=na.omit)
```


```{r}
model_rf
```


## Decision Tree (C4.5)

```{r}

```











## IBK (KNN)



















